GlobalOnlyDefRecord(
    """\
    Defines the timer resolution and time range of this trace. There will be no
    event with a timestamp less than @a globalOffset, and no event with
    timestamp greater than (@a globalOffset + @a traceLength).
    """,
    5,
    'ClockProperties',
    Attribute(
        """Ticks per seconds.""",
        uint64_t,
        'timerResolution'
    ),
    Attribute(
        """A timestamp smaller than all event timestamps.""",
        uint64_t,
        'globalOffset'
    ),
    Attribute(
        """\
        A timespan which includes the timespan between the smallest and
        greatest timestamp of all event timestamps.
        """,
        uint64_t,
        'traceLength'
    ))

LocalOnlyDefRecord(
    """\
    Mapping tables are needed for situations where an ID is not globally known
    at measurement time. They are applied automatically at reading.
    """,
    5,
    'MappingTable',
    MappingTypeAttribute(
        """Says to what type of ID the mapping table has to be applied."""
    ),
    Attribute(
        """Mapping table.""",
        OTF2_IdMap,
        'idMap'
    ),
    evt_reader_def_callback='set_mapping_table')

LocalOnlyDefRecord(
    """Clock offsets are used for clock corrections.""",
    6,
    'ClockOffset',
    Attribute(
        """Time when this offset was determined.""",
        OTF2_TimeStamp,
        'time'
    ),
    Attribute(
        """The offset to the global clock which was determined at @a time.""",
        int64_t,
        'offset'
    ),
    Attribute(
        """\
        A possible standard deviation, which can be used as a metric for the
        quality of the offset.
        """,
        double,
        'standardDeviation'
    ),
    evt_reader_def_callback='add_clock_offset')

DefRecord(
    """""",
    10,
    'String',
    uint32_t,
    Attribute(
        """The string, null terminated.""",
        string_t,
        'string'
    ),
    mapping_type=OTF2_MAPPING_STRING)

DefRecord(
    """""",
    11,
    'Attribute',
    uint32_t,
    StringAttribute(
        """Name of the attribute.""",
        'name'
    ),
    TypeAttribute(
        """Type of the attribute value.""",
        'type'
    ),
    mapping_type=OTF2_MAPPING_ATTRIBUTE)

DefRecord(
    """""",
    12,
    'SystemTreeNode',
    uint32_t,
    StringAttribute(
        """Free form instance name of this node.""",
        'name'
    ),
    StringAttribute(
        """Free form class name of this node""",
        'className'
    ),
    SelfRefAttribute(
        """\
        Parent id of this node. May be @eref{OTF2_UNDEFINED_SYSTEM_TREE_NODE}
        to indicate that there is no parent.
        """
    ))

DefRecord(
    """""",
    13,
    'LocationGroup',
    uint32_t,
    StringAttribute(
        """Name of the group.""",
        'name'
    ),
    LocationGroupTypeAttribute(
        """Type of this group."""
    ),
    SystemTreeNodeAttribute(
        """Parent of this location group in the system tree.""",
        'systemTreeParent'
    ))

DefRecord(
    """""",
    14,
    'Location',
    uint64_t,
    StringAttribute(
        """Name of the location""",
        'name'
    ),
    LocationTypeAttribute(
        """Location type."""
    ),
    Attribute(
        """Number of events this location has recorded.""",
        uint64_t,
        'numberOfEvents'
    ),
    LocationGroupAttribute(
        """Location group which includes this location."""
    ),
    mapping_type=OTF2_MAPPING_LOCATION)

DefRecord(
    """""",
    15,
    'Region',
    uint32_t,
    StringAttribute(
        """Name of the region (demangled name if available).""",
        'name'
    ),
    StringAttribute(
        """Alternative name of the region (e.g. mangled name).""",
        'canonicalName',
        since=Version(1,1)
    ),
    StringAttribute(
        """A more detailed description of this region.""",
        'description'
    ),
    RegionTypeAttribute(
        """Region type.""",
        attic=Version(1,1)
    ),
    RegionRoleAttribute(
        """Region role.""",
        since=Version(1,1)
    ),
    ParadigmAttribute(
        """Paradigm.""",
        since=Version(1,1)
    ),
    RegionFlagAttribute(
        """Region flags.""",
        'regionFlags',
        since=Version(1,1)
    ),
    StringAttribute(
        """The source file where this region was declared.""",
        'sourceFile'
    ),
    Attribute(
        """Starting line number of this region in the source file.""",
        uint32_t,
        'beginLineNumber'
    ),
    Attribute(
        """Ending line number of this region in the source file.""",
        uint32_t,
        'endLineNumber'
    ),
    mapping_type=OTF2_MAPPING_REGION)

DefRecord(
    """""",
    16,
    'Callsite',
    uint32_t,
    StringAttribute(
        """The source file where this call was made.""",
        'sourceFile'
    ),
    Attribute(
        """Line number in the source file where this call was made.""",
        uint32_t,
        'lineNumber'
    ),
    RegionAttribute(
        """The region which was called.""",
        'enteredRegion'
    ),
    RegionAttribute(
        """The region which made the call.""",
        'leftRegion'
    ))

DefRecord(
    """""",
    17,
    'Callpath',
    uint32_t,
    SelfRefAttribute(
        """"""
    ),
    RegionAttribute(
        """"""
    ))

DefRecord(
    """""",
    18,
    'Group',
    uint32_t,
    StringAttribute(
        """Name of this group""",
        'name'
    ),
    GroupTypePre12Attribute(
        """The type of this group.""",
        attic=Version(1,2)
    ),
    GroupTypeAttribute(
        """The type of this group.""",
        since=Version(1,2)
    ),
    ParadigmAttribute(
        """The paradigm of this communication group.""",
        since=Version(1,2)
    ),
    GroupFlagAttribute(
        """Flags for this group.""",
        'groupFlags',
        since=Version(1,2)
    ),
    ArrayAttribute(
        """The number of members in this group.""",
        uint32_t,
        'numberOfMembers',
        Attribute(
            """The identifiers of the group members.""",
            uint64_t,
            'members'
        )),
    mapping_type=OTF2_MAPPING_GROUP)

DefRecord(
    """\
    A metric is defined by a metric member definition. A metric member is
    always a member of a metric class. Therefore, a single metric is a special
    case of a metric class with only one member. It is not allowed to reference
    a metric member id in a metric event, but only metric class IDs.
    """,
    19,
    'MetricMember',
    uint32_t,
    StringAttribute(
        """Name of the metric.""",
        'name'
    ),
    StringAttribute(
        """Description of the metric.""",
        'description'
    ),
    MetricTypeAttribute(
        """Metric type: PAPI, etc."""
    ),
    MetricModeAttribute(
        """Metric mode: accumulative, fix, relative, etc."""
    ),
    TypeAttribute(
        """Type of the value: int64_t, uint64_t, or double.""",
        'valueType'
    ),
    MetricBaseAttribute(
        """\
        The recorded values should be handled in this given base, either
        binary or decimal. This information can be used if the value needs
        to be scaled.
        """
    ),
    Attribute(
        """\
        The values inside the Metric events should be scaled by the factor
        base^exponent, to get the value in its base unit. For example, if the
        metric values come in as KiBi, than the base should be
        @eref{OTF2_BASE_BINARY} and the exponent 10. Than the writer does not
        need to scale the values up to bytes, but can directly write the KiBi
        values into the Metric event. At reading time, the reader can apply the
        scaling factor to get the value in its base unit, ie. in bytes.
        """,
        int64_t,
        'exponent'
    ),
    StringAttribute(
        """\
        Unit of the metric. This needs to be the scale free base unit, ie.
        "bytes", "operations", or "seconds". In particular this unit should
        not have any scale prefix.
        """,
        'unit'
    ))

DefRecord(
    """\
    For a metric class it is implicitly given that the event stream that
    records the metric is also the scope. A metric class can contain multiple
    different metrics.
    """,
    20,
    'MetricClass',
    uint32_t,
    ArrayAttribute(
        """Number of metrics within the set.""",
        uint8_t,
        'numberOfMetrics',
        MetricMemberAttribute(
            """List of metric members."""
        )),
    MetricOccurrenceAttribute(
        """Defines occurrence of a metric set."""
    ),
    RecorderKindAttribute(
        """\
        What kind of locations will record this metric class, or will this
        metric class only be recorded by metric instances.
        """,
        since=Version(1,2)
    ),
    mapping_type=OTF2_MAPPING_METRIC,
    ref_name='Metric')

DefRecord(
    """\
    A metric instance is used to define metrics that are recorded at one
    location for multiple locations or for another location. The occurrence
    of a metric instance is implicitly of type @eref{OTF2_METRIC_ASYNCHRONOUS}.
    """,
    21,
    'MetricInstance',
    MetricClassRecord,
    MetricAttribute(
        """\
        The instanced @eref{MetricClass}. This metric class must be of kind
        @eref{OTF2_RECORDER_KIND_ABSTRACT}.
        """,
        'metricClass'
    ),
    LocationAttribute(
        """Recorder of the metric: location ID.""",
        'recorder'
    ),
    MetricScopeAttribute(
        """\
        Defines type of scope: location, location group, system tree node,
        or a generic group of locations.
        """
    ),
    Attribute(
        """\
        Scope of metric: ID of a location, location group, system tree node,
        or a generic group of locations.
        """,
        uint64_t,
        'scope'
    ))

DefRecord(
    """""",
    22,
    'Comm',
    uint32_t,
    StringAttribute(
        """\
        The name given by calling MPI_Comm_set_name on this communicator.
        Or the empty name to indicate that no name was given.
        """,
        'name'
    ),
    GroupAttribute(
        """\
        The describing MPI group of this MPI communicator
        
        The group needs to be of type @eref{OTF2_GROUP_TYPE_MPI_GROUP} or
        @eref{OTF2_GROUP_TYPE_MPI_COMM_SELF}.
        """
    ),
    SelfRefAttribute(
        """\
        The parent MPI communicator from which this communicator was created,
        if any. Use @eref{OTF2_UNDEFINED_COMM} to indicate no parent.
        """
    ),
    mapping_type=OTF2_MAPPING_COMM)

DefRecord(
    """""",
    23,
    'Parameter',
    uint32_t,
    StringAttribute(
        """Name of the parameter (variable name etc.)""",
        'name'
    ),
    ParameterTypeAttribute(
        """\
        Type of the parameter, @eref{OTF2_ParameterType} for possible types.
        """
    ),
    mapping_type=OTF2_MAPPING_PARAMETER)

DefRecord(
    """\
    A window defines the communication context for any remote-memory access operation.
    """,
    24,
    'RmaWin',
    uint32_t,
    StringAttribute(
        """Name, e.g. 'GASPI Queue 1', 'NVidia Card 2', etc..""",
        'name',
    ),
    CommAttribute(
        """Communicator object used to create the window.""",
        'comm',
    ),
    since=Version(1,2),
    mapping_type=OTF2_MAPPING_RMA_WIN)

SuppDefRecord(
    """""",
    25,
    'MetricClassRecorder',
    MetricClassRecord,
    LocationAttribute(
        """The location which recorded the referenced metric class.""",
        'recorder'
    ),
    since=Version(1,2))

SuppDefRecord(
    """""",
    26,
    'SystemTreeNodeProperty',
    SystemTreeNodeRecord,
    StringAttribute(
        """Name of the property.""",
        'name'
    ),
    StringAttribute(
        """Property value.""",
        'value'
    ),
    since=Version(1,2))

SuppDefRecord(
    """""",
    27,
    'SystemTreeNodeDomain',
    SystemTreeNodeRecord,
    SystemTreeDomainAttribute(
        """"""
    ),
    since=Version(1,2))
